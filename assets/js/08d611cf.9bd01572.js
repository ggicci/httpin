"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[313],{3065:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>s,default:()=>l,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var n=t(5893),r=t(1151);const c={sidebar_position:1},s="Concepts",d={id:"advanced/concepts",title:"Concepts",description:"httpin is driven by owl - a framework that drives particular algorithms by defining Go struct tags.",source:"@site/docs/advanced/concepts.md",sourceDirName:"advanced",slug:"/advanced/concepts",permalink:"/httpin/advanced/concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/advanced/concepts.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"go-restful",permalink:"/httpin/integrations/go-restful"},next:{title:"Error Handler",permalink:"/httpin/advanced/error-handler"}},o={},h=[{value:"Directive",id:"directive",level:2},{value:"Directive Executor",id:"directive-executor",level:2}];function a(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"concepts",children:"Concepts"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.strong,{children:"httpin"})," is driven by ",(0,n.jsx)(i.a,{href:"https://github.com/ggicci/owl",children:"owl"})," - a framework that drives particular algorithms by defining Go struct tags."]}),"\n",(0,n.jsx)(i.p,{children:"Let's take the following declaration of a struct as an example to explain how it works:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-go",children:'type Authorization struct {\n\tToken string `in:"query=access_token,token;header=x-api-token;required"`\n\t                  ^----------------------^ ^----------------^ ^------^\n\t                            d1                    d2            d3\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:["The struct tag key for ",(0,n.jsx)(i.strong,{children:"httpin"})," is ",(0,n.jsx)(i.code,{children:"in"}),". This key is specific to ",(0,n.jsx)(i.strong,{children:"httpin"}),", just in the same way ",(0,n.jsx)(i.code,{children:"json"})," is specifically used by the ",(0,n.jsx)(i.strong,{children:"encoding/json"})," package."]}),"\n",(0,n.jsxs)(i.p,{children:["We can define multiple ",(0,n.jsx)(i.a,{href:"#directive",children:"directives"})," in the tag, which must be ",(0,n.jsxs)(i.strong,{children:["separated by semicolons (",(0,n.jsx)(i.code,{children:";"}),")"]}),". See the example above, where ",(0,n.jsx)(i.code,{children:"d1"}),", ",(0,n.jsx)(i.code,{children:"d2"})," and ",(0,n.jsx)(i.code,{children:"d3"})," are three different directives.\n",(0,n.jsx)(i.strong,{children:"httpin"})," will run the directives in order (",(0,n.jsx)(i.code,{children:"d1"})," -> ",(0,n.jsx)(i.code,{children:"d2"})," -> ",(0,n.jsx)(i.code,{children:"d3"}),") for each corresponding struct field."]}),"\n",(0,n.jsxs)(i.admonition,{type:"caution",children:[(0,n.jsxs)(i.p,{children:["Not every directive will be executed by ",(0,n.jsx)(i.strong,{children:"httpin"}),". It's decided by the executors (algorithms) of the directives and the actual input (request data)."]}),(0,n.jsxs)(i.p,{children:["The execution of a directive can fail. If a directive fails, none of the directives listed after it will execute. i.e. If ",(0,n.jsx)(i.code,{children:"d1"})," fails, ",(0,n.jsx)(i.code,{children:"d2"})," and ",(0,n.jsx)(i.code,{children:"d3"})," will not run."]})]}),"\n",(0,n.jsx)(i.h2,{id:"directive",children:"Directive"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"Directive"})," is a formatted string consisting of two parts, the ",(0,n.jsx)(i.a,{href:"#directive-executor",children:"directive executor"}),", and the arguments, ",(0,n.jsxs)(i.strong,{children:["separated by an equal sign (",(0,n.jsx)(i.code,{children:"="}),")"]}),", formatted as:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"name=argv\n"})}),"\n",(0,n.jsx)(i.p,{children:"Which works like a function call."}),"\n",(0,n.jsxs)(i.p,{children:["To the left of the ",(0,n.jsx)(i.code,{children:"="})," is the name of the directive. There's a corresponding directive executor (with the same name) working under the hood."]}),"\n",(0,n.jsxs)(i.p,{children:["To the right of the ",(0,n.jsx)(i.code,{children:"="})," are the arguments, which will be passed to the algorithm at runtime. The way to define arguments can differ across different directives. In general, comma (",(0,n.jsx)(i.code,{children:","}),") separated strings are used for multiple arguments. Arguments can be ommited. For more specific usage, you should consult the documentation of the directives."]}),"\n",(0,n.jsx)(i.p,{children:"For the above example, there are three directives:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["d1: ",(0,n.jsx)(i.code,{children:"query=access_token,token"})]}),"\n",(0,n.jsxs)(i.li,{children:["d2: ",(0,n.jsx)(i.code,{children:"header=x-api-token"})]}),"\n",(0,n.jsxs)(i.li,{children:["d3: ",(0,n.jsx)(i.code,{children:"required"})]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["Let's dissect ",(0,n.jsx)(i.code,{children:"d1"}),", i.e. ",(0,n.jsx)(i.code,{children:"query=access_token,token"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.strong,{children:"name"})," is ",(0,n.jsx)(i.code,{children:"query"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.strong,{children:"argv"})," is ",(0,n.jsx)(i.code,{children:"access_token,token"}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["After reading the documentation of the ",(0,n.jsx)(i.a,{href:"/directives/query",children:(0,n.jsx)(i.strong,{children:"query"})})," directive, we know the args will be treated as ",(0,n.jsx)(i.code,{children:'["access_token", "token"]'}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"directive-executor",children:"Directive Executor"}),"\n",(0,n.jsxs)(i.p,{children:["A ",(0,n.jsx)(i.code,{children:"Directive Executor"})," is an algorithm with runtime context, that's responsible for executing a concrete ",(0,n.jsx)(i.a,{href:"#directive",children:(0,n.jsx)(i.strong,{children:"directive"})}),"."]}),"\n",(0,n.jsxs)(i.p,{children:["For better understanding, we can think of a ",(0,n.jsx)(i.code,{children:"Directive Executor"})," as a function in a programming language, and a ",(0,n.jsx)(i.code,{children:"Directive"})," as a concrete function call."]}),"\n",(0,n.jsx)(i.p,{children:"e.g."}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Directive Executor"}),(0,n.jsx)(i.th,{children:"Directive"}),(0,n.jsx)(i.th,{children:"Execution"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"query"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"query=access_token,token"})}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:'query(["access_token", "token"])'})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"header"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"header=x-api-token,Authorization"})}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:'header(["x-api-token", "Authorization"])'})})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:"required"}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"required"})}),(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"required([])"})})]})]})]})]})}function l(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}}}]);
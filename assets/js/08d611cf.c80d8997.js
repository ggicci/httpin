"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[313],{4545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:1},o="Concepts",d={unversionedId:"advanced/concepts",id:"advanced/concepts",title:"Concepts",description:"httpin is driven by defining Go struct tags.",source:"@site/docs/advanced/concepts.md",sourceDirName:"advanced",slug:"/advanced/concepts",permalink:"/httpin/advanced/concepts",draft:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/advanced/concepts.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"go-restful",permalink:"/httpin/integrations/go-restful"},next:{title:"Error Handler",permalink:"/httpin/advanced/error-handler"}},p={},l=[{value:"Directive",id:"directive",level:2},{value:"Directive Executor",id:"directive-executor",level:2}],c={toc:l},s="wrapper";function k(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"concepts"},"Concepts"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"httpin")," is driven by defining Go struct tags."),(0,i.kt)("p",null,"Let's take the following decleartion of a struct as an example to explain how it works:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'type Authorization struct {\n    Token string `in:"query=access_token,token;header=x-api-token;required"`\n                      ^----------------------^ ^----------------^ ^------^\n                                d1                    d2            d3\n}\n')),(0,i.kt)("p",null,"The key of the struct tag to drive ",(0,i.kt)("strong",{parentName:"p"},"httpin")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"in"),". Which is specific for the ",(0,i.kt)("strong",{parentName:"p"},"httpin")," package, like ",(0,i.kt)("inlineCode",{parentName:"p"},"json")," for ",(0,i.kt)("strong",{parentName:"p"},"encoding/json"),"."),(0,i.kt)("p",null,"We can define multiple ",(0,i.kt)("a",{parentName:"p",href:"#directive"},"directives")," in the tag, which must be ",(0,i.kt)("strong",{parentName:"p"},"separated by semicolons (",(0,i.kt)("inlineCode",{parentName:"strong"},";"),")"),". See the example above, ",(0,i.kt)("inlineCode",{parentName:"p"},"d1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"d2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"d3")," are three different directives.\n",(0,i.kt)("strong",{parentName:"p"},"httpin")," will run the directives in order (",(0,i.kt)("inlineCode",{parentName:"p"},"d1")," -> ",(0,i.kt)("inlineCode",{parentName:"p"},"d2")," -> ",(0,i.kt)("inlineCode",{parentName:"p"},"d3"),") for each corresponding struct field."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Not every directive will be executed by ",(0,i.kt)("strong",{parentName:"p"},"httpin"),". It's decided by the executors (algorithms) of the directives and the actual input (request data)."),(0,i.kt)("p",{parentName:"admonition"},"The execution of a directive can fail, if a former directive failed, the latter ones won't be executed. If ",(0,i.kt)("inlineCode",{parentName:"p"},"d1")," failed, ",(0,i.kt)("inlineCode",{parentName:"p"},"d2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"d3")," won't run.")),(0,i.kt)("h2",{id:"directive"},"Directive"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Directive")," is a formatted string consisting of two parts, the ",(0,i.kt)("a",{parentName:"p",href:"#directive-executor"},"directive executor"),", and the arguments, ",(0,i.kt)("strong",{parentName:"p"},"separated by an equal sign (",(0,i.kt)("inlineCode",{parentName:"strong"},"="),")"),", formatted as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"name=argv\n")),(0,i.kt)("p",null,"Which works like a function call."),(0,i.kt)("p",null,"The left to the ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," is the name of the directive. There's a corresponding directive executor (with the same name) working underhood."),(0,i.kt)("p",null,"The right to the ",(0,i.kt)("inlineCode",{parentName:"p"},"=")," is the arguments, which will be passed to the algorithm at runtime. The way to define arguments can differ across different directives. In general, it will be a comma (",(0,i.kt)("inlineCode",{parentName:"p"},","),") separated strings for multiple arguments. Arguments can be ommited. For more specific usage, you should consult the documentation of the directives."),(0,i.kt)("p",null,"For the above example, there are three directives:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"d1: ",(0,i.kt)("inlineCode",{parentName:"li"},"query=access_token,token")),(0,i.kt)("li",{parentName:"ul"},"d2: ",(0,i.kt)("inlineCode",{parentName:"li"},"header=x-api-token")),(0,i.kt)("li",{parentName:"ul"},"d3: ",(0,i.kt)("inlineCode",{parentName:"li"},"required"))),(0,i.kt)("p",null,"Let's dissect ",(0,i.kt)("inlineCode",{parentName:"p"},"d1"),", i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"query=access_token,token"),". The ",(0,i.kt)("strong",{parentName:"p"},"name")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"query"),". The ",(0,i.kt)("strong",{parentName:"p"},"argv")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"access_token,token"),". And after reading the documentation of ",(0,i.kt)("a",{parentName:"p",href:"/directives/query"},(0,i.kt)("strong",{parentName:"a"},"query")),", we know the args will be treated as ",(0,i.kt)("inlineCode",{parentName:"p"},'["access_token", "token"]'),"."),(0,i.kt)("h2",{id:"directive-executor"},"Directive Executor"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Directive Executor")," is an algorithm with runtime context who's responsible to execute a concrete ",(0,i.kt)("a",{parentName:"p",href:"#directive"},(0,i.kt)("strong",{parentName:"a"},"directive")),"."),(0,i.kt)("p",null,"To give a better understanding, we can treat ",(0,i.kt)("inlineCode",{parentName:"p"},"Directive Executor")," as a function in a programming lanaguage, and treat ",(0,i.kt)("inlineCode",{parentName:"p"},"Directive")," as a concrete function call."),(0,i.kt)("p",null,"e.g."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Diretive Executor"),(0,i.kt)("th",{parentName:"tr",align:null},"Directive"),(0,i.kt)("th",{parentName:"tr",align:null},"Execution"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"query"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"query=access_token,token")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'query(["access_token", "token"])'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"header"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"header=x-api-token,Authorization")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'header(["x-api-token", "Authorization"])'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"required"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"required")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"required([])"))))))}k.isMDXComponent=!0}}]);
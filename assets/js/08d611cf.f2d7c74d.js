"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[313],{4545:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],d={sidebar_position:1},p="Concepts",l={unversionedId:"advanced/concepts",id:"advanced/concepts",isDocsHomePage:!1,title:"Concepts",description:"httpin is driven by defining Go struct tags.",source:"@site/docs/advanced/concepts.md",sourceDirName:"advanced",slug:"/advanced/concepts",permalink:"/httpin/advanced/concepts",editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/advanced/concepts.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"gin-gonic/gin \ud83e\udd64",permalink:"/httpin/integrations/gin"},next:{title:"Error Handler",permalink:"/httpin/advanced/error-handler"}},c=[{value:"Directive",id:"directive",children:[],level:2},{value:"Directive Executor",id:"directive-executor",children:[],level:2}],s={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"concepts"},"Concepts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"httpin")," is driven by defining Go struct tags."),(0,r.kt)("p",null,"Let's take the following decleartion of a struct as an example to explain how it works:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type Authorization struct {\n    Token string `in:"query=access_token,token;header=x-api-token;required"`\n                      ^----------------------^ ^----------------^ ^------^\n                                d1                    d2            d3\n}\n')),(0,r.kt)("p",null,"The key of the struct tag to drive ",(0,r.kt)("strong",{parentName:"p"},"httpin")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"in"),". Which is specific for the ",(0,r.kt)("strong",{parentName:"p"},"httpin")," package, like ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," for ",(0,r.kt)("strong",{parentName:"p"},"encoding/json"),"."),(0,r.kt)("p",null,"We can define multiple ",(0,r.kt)("a",{parentName:"p",href:"#directive"},"directives")," in the tag, which must be ",(0,r.kt)("strong",{parentName:"p"},"separated by semicolons (",(0,r.kt)("inlineCode",{parentName:"strong"},";"),")"),". See the example above, ",(0,r.kt)("inlineCode",{parentName:"p"},"d1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"d2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"d3")," are three different directives.\n",(0,r.kt)("strong",{parentName:"p"},"httpin")," will run the directives in order (",(0,r.kt)("inlineCode",{parentName:"p"},"d1")," -> ",(0,r.kt)("inlineCode",{parentName:"p"},"d2")," -> ",(0,r.kt)("inlineCode",{parentName:"p"},"d3"),") for each corresponding struct field."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Not every directive will be executed by ",(0,r.kt)("strong",{parentName:"p"},"httpin"),". It's decided by the executors (algorithms) of the directives and the actual input (request data)."),(0,r.kt)("p",{parentName:"div"},"The execution of a directive can fail, if a former directive failed, the latter ones won't be executed. If ",(0,r.kt)("inlineCode",{parentName:"p"},"d1")," failed, ",(0,r.kt)("inlineCode",{parentName:"p"},"d2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"d3")," won't run."))),(0,r.kt)("h2",{id:"directive"},"Directive"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Directive")," is a formatted string consisting of two parts, the ",(0,r.kt)("a",{parentName:"p",href:"#directive-executor"},"directive executor"),", and the arguments, ",(0,r.kt)("strong",{parentName:"p"},"separated by an equal sign (",(0,r.kt)("inlineCode",{parentName:"strong"},"="),")"),", formatted as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"name=argv\n")),(0,r.kt)("p",null,"Which works like a function call."),(0,r.kt)("p",null,"The left to the ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," is the name of the directive. There's a corresponding directive executor (with the same name) working underhood."),(0,r.kt)("p",null,"The right to the ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," is the arguments, which will be passed to the algorithm at runtime. The way to define arguments can differ across different directives. In general, it will be a comma (",(0,r.kt)("inlineCode",{parentName:"p"},","),") separated strings for multiple arguments. Arguments can be ommited. For more specific usage, you should consult the documentation of the directives."),(0,r.kt)("p",null,"For the above example, there are three directives:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"d1: ",(0,r.kt)("inlineCode",{parentName:"li"},"query=access_token,token")),(0,r.kt)("li",{parentName:"ul"},"d2: ",(0,r.kt)("inlineCode",{parentName:"li"},"header=x-api-token")),(0,r.kt)("li",{parentName:"ul"},"d3: ",(0,r.kt)("inlineCode",{parentName:"li"},"required"))),(0,r.kt)("p",null,"Let's dissect ",(0,r.kt)("inlineCode",{parentName:"p"},"d1"),", i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"query=access_token,token"),". The ",(0,r.kt)("strong",{parentName:"p"},"name")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),". The ",(0,r.kt)("strong",{parentName:"p"},"argv")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"access_token,token"),". And after reading the documentation of ",(0,r.kt)("a",{parentName:"p",href:"/directives/query"},(0,r.kt)("strong",{parentName:"a"},"query")),", we know the args will be treated as ",(0,r.kt)("inlineCode",{parentName:"p"},'["access_token", "token"]'),"."),(0,r.kt)("h2",{id:"directive-executor"},"Directive Executor"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Directive Executor")," is an algorithm with runtime context who's responsible to execute a concrete ",(0,r.kt)("a",{parentName:"p",href:"#directive"},(0,r.kt)("strong",{parentName:"a"},"directive")),"."),(0,r.kt)("p",null,"To give a better understanding, we can treat ",(0,r.kt)("inlineCode",{parentName:"p"},"Directive Executor")," as a function in a programming lanaguage, and treat ",(0,r.kt)("inlineCode",{parentName:"p"},"Directive")," as a concrete function call."),(0,r.kt)("p",null,"e.g."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Diretive Executor"),(0,r.kt)("th",{parentName:"tr",align:null},"Directive"),(0,r.kt)("th",{parentName:"tr",align:null},"Execution"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"query"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"query=access_token,token")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'query(["access_token", "token"])'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"header"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"header=x-api-token,Authorization")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},'header(["x-api-token", "Authorization"])'))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"required")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"required([])"))))))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[50],{3152:function(e,t,n){n.d(t,{Z:function(){return m}});var i=n(4035),r=n(1720),o=n.n(r),a=n(9812),s=n(5670),c=n(7294),u="toolbar_uIxz",p="button_yMrS",l="hidden_X41c",h="https://goplay.ggicci.me",d=function(e){var t=e.children,n=e.onClick;return c.createElement("button",{className:p,onClick:n},t)},m=function(e){var t=e.children,n=c.useRef(null),r=c.useRef(null),p=t&&t.props&&"pre"===t.props.mdxType&&t,m=p&&p.props&&p.props.children;if(!m||"code"!==m.props.mdxType)return c.createElement("div",null,"GoPlay: the wrapped data is not a codeblock.");if(!/\blanguage-go\b/.test(m&&m.props.className))return c.createElement("div",null,"GoPlay: only go code supported.");function g(){return(g=(0,i.Z)(o().mark((function e(){var t,n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new a.h(h),e.next=3,t.share(m.props.children.trim());case 3:n=e.sent,window.open(n,"_blank");case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return c.createElement(c.Fragment,null,t,c.createElement("div",{ref:n,className:l},c.createElement(s.Z,{language:"text"},c.createElement("div",{ref:r}))),c.createElement("div",{className:u},c.createElement(d,{onClick:function(){if(r.current){var e=new a.h(h);n.current.classList.remove(l),e.renderCompile(r.current,m.props.children.trim())}}},"Run"),c.createElement(d,{onClick:function(){return g.apply(this,arguments)}},"Try it yourself \u21e2")))}},845:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return h}});var i=n(3117),r=n(102),o=(n(7294),n(3905)),a=n(3152),s=["components"],c={sidebar_position:1},u="go-chi/chi",p={unversionedId:"integrations/gochi",id:"integrations/gochi",title:"go-chi/chi",description:"go-chi/chi is",source:"@site/docs/integrations/gochi.mdx",sourceDirName:"integrations",slug:"/integrations/gochi",permalink:"/httpin/integrations/gochi",draft:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/integrations/gochi.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"net/http",permalink:"/httpin/integrations/http"},next:{title:"gorilla/mux \ud83e\udd8d",permalink:"/httpin/integrations/gorilla"}},l={},h=[{value:"Integrations",id:"integrations",level:2},{value:"Run Demo",id:"run-demo",level:2}],d={toc:h};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"go-chichi"},"go-chi/chi"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/go-chi/chi"},(0,o.kt)("strong",{parentName:"a"},"go-chi/chi"))," is"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"a lightweight, idiomatic and composable router for building Go HTTP services.")),(0,o.kt)("h2",{id:"integrations"},"Integrations"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Chain ",(0,o.kt)("inlineCode",{parentName:"li"},"httpin.NewInput")," middleware with ",(0,o.kt)("inlineCode",{parentName:"li"},"chi.With")," method"),(0,o.kt)("li",{parentName:"ol"},"Enable ",(0,o.kt)("inlineCode",{parentName:"li"},"path")," Directive by using ",(0,o.kt)("inlineCode",{parentName:"li"},"chi.URLParam")," Method")),(0,o.kt)("h2",{id:"run-demo"},"Run Demo"),(0,o.kt)(a.Z,{mdxType:"GoPlay"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"{20,28,35}","{20,28,35}":!0},'package main\n\nimport (\n    "fmt"\n    "net/http"\n    "net/http/httptest"\n\n    "github.com/ggicci/httpin"\n    "github.com/go-chi/chi/v5"\n)\n\ntype ListUserReposInput struct {\n    Username   string `in:"path=username"`\n    Visibility string `in:"query=visibility"`\n    Fork       bool   `in:"query=fork"`\n}\n\nfunc ListUserRepos(rw http.ResponseWriter, r *http.Request) {\n    // Retrieve you data in one line of code!\n    input := r.Context().Value(httpin.Input).(*ListUserReposInput)\n\n    fmt.Printf("input: %#v\\n", input)\n}\n\nfunc init() {\n    // Register a directive named "path" to retrieve values from `chi.URLParam`,\n    // i.e. decode path variables.\n    httpin.UseGochiURLParam("path", chi.URLParam)\n}\n\nfunc main() {\n    router := chi.NewRouter()\n\n    // Bind input struct with handler.\n    router.With(\n        httpin.NewInput(ListUserReposInput{}),\n    ).Get("/users/{username}/repos", ListUserRepos)\n\n    r, _ := http.NewRequest("GET", "/users/ggicci/repos?visibility=public&fork=1", nil)\n\n    rw := httptest.NewRecorder()\n    router.ServeHTTP(rw, r)\n}\n'))))}m.isMDXComponent=!0}}]);
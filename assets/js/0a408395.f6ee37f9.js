"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[50],{8760:(t,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>h,toc:()=>d});var e=n(5893),r=n(1151),s=n(2332);const o={sidebar_position:1},c="go-chi/chi",h={id:"integrations/gochi",title:"go-chi/chi",description:"go-chi/chi is",source:"@site/docs/integrations/gochi.mdx",sourceDirName:"integrations",slug:"/integrations/gochi",permalink:"/httpin/integrations/gochi",draft:!1,unlisted:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/integrations/gochi.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"net/http",permalink:"/httpin/integrations/http"},next:{title:"gorilla/mux \ud83e\udd8d",permalink:"/httpin/integrations/gorilla"}},a={},d=[{value:"Integrations",id:"integrations",level:2},{value:"Run Demo",id:"run-demo",level:2}];function l(t){const i={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(i.h1,{id:"go-chichi",children:"go-chi/chi"}),"\n",(0,e.jsxs)(i.p,{children:[(0,e.jsx)(i.a,{href:"https://github.com/go-chi/chi",children:(0,e.jsx)(i.strong,{children:"go-chi/chi"})})," is"]}),"\n",(0,e.jsxs)(i.blockquote,{children:["\n",(0,e.jsx)(i.p,{children:"a lightweight, idiomatic and composable router for building Go HTTP services."}),"\n"]}),"\n",(0,e.jsx)(i.h2,{id:"integrations",children:"Integrations"}),"\n",(0,e.jsxs)(i.ol,{children:["\n",(0,e.jsxs)(i.li,{children:["Chain ",(0,e.jsx)(i.code,{children:"httpin.NewInput"})," middleware with ",(0,e.jsx)(i.code,{children:"chi.With"})," method"]}),"\n",(0,e.jsxs)(i.li,{children:["Enable ",(0,e.jsx)(i.code,{children:"path"})," Directive by using ",(0,e.jsx)(i.code,{children:"chi.URLParam"})," Method"]}),"\n"]}),"\n",(0,e.jsx)(i.h2,{id:"run-demo",children:"Run Demo"}),"\n",(0,e.jsx)(s.Z,{children:(0,e.jsx)(i.pre,{children:(0,e.jsx)(i.code,{className:"language-go",metastring:"{20,28,35}",children:'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"net/http/httptest"\n\n\t"github.com/ggicci/httpin"\n\thttpin_integration "github.com/ggicci/httpin/integration"\n\t"github.com/go-chi/chi/v5"\n)\n\ntype ListUserReposInput struct {\n\tUsername   string `in:"path=username"`\n\tVisibility string `in:"query=visibility"`\n\tFork       bool   `in:"query=fork"`\n}\n\nfunc ListUserRepos(rw http.ResponseWriter, r *http.Request) {\n\t// Retrieve you data in one line of code!\n\tinput := r.Context().Value(httpin.Input).(*ListUserReposInput)\n\n\tfmt.Printf("input: %#v\\n", input)\n}\n\nfunc init() {\n\t// Register a directive named "path" to retrieve values from `chi.URLParam`,\n\t// i.e. decode path variables.\n\thttpin_integration.UseGochiURLParam("path", chi.URLParam)\n}\n\nfunc main() {\n\trouter := chi.NewRouter()\n\n\t// Bind input struct with handler.\n\trouter.With(\n\t\thttpin.NewInput(ListUserReposInput{}),\n\t).Get("/users/{username}/repos", ListUserRepos)\n\n\tr, _ := http.NewRequest("GET", "/users/ggicci/repos?visibility=public&fork=1", nil)\n\n\trw := httptest.NewRecorder()\n\trouter.ServeHTTP(rw, r)\n}\n'})})})]})}function p(t={}){const{wrapper:i}={...(0,r.a)(),...t.components};return i?(0,e.jsx)(i,{...t,children:(0,e.jsx)(l,{...t})}):l(t)}}}]);
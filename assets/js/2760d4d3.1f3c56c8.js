"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[554],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=l(r),f=i,g=m["".concat(u,".").concat(f)]||m[f]||p[f]||o;return r?n.createElement(g,a(a({ref:t},s),{},{components:r})):n.createElement(g,a({ref:t},s))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8674:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var n=r(3117),i=r(102),o=(r(7294),r(3905)),a=["components"],c={sidebar_position:2},u="gorilla/mux \ud83e\udd8d",l={unversionedId:"integrations/gorilla",id:"integrations/gorilla",title:"gorilla/mux \ud83e\udd8d",description:"gorilla/mux is",source:"@site/docs/integrations/gorilla.md",sourceDirName:"integrations",slug:"/integrations/gorilla",permalink:"/httpin/integrations/gorilla",draft:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/integrations/gorilla.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"go-chi/chi",permalink:"/httpin/integrations/gochi"},next:{title:"gin-gonic/gin \ud83e\udd64",permalink:"/httpin/integrations/gin"}},s={},p=[{value:"path Directive by <code>mux.Vars</code>",id:"path-directive-by-muxvars",level:2}],m={toc:p};function f(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gorillamux-"},"gorilla/mux \ud83e\udd8d"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/gorilla/mux"},"gorilla/mux")," is"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A powerful HTTP router and URL matcher for building Go web servers")),(0,o.kt)("h2",{id:"path-directive-by-muxvars"},"path Directive by ",(0,o.kt)("inlineCode",{parentName:"h2"},"mux.Vars")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"{4}","{4}":!0},'func init() {\n    // Register a directive named "path" to retrieve values from `mux.Vars`,\n    // i.e. decode path variables.\n    httpin.UseGorillaMux("path", mux.Vars)\n}\n\ntype GetPostOfUserInput struct {\n    Username string `in:"path=username"` // equivalent to `mux.Vars(r)["username"]`\n    PostID   int64  `in:"path=pid"`\n}\n')))}f.isMDXComponent=!0}}]);
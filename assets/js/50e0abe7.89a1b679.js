"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[397],{4891:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var i=n(5893),r=n(1151),d=n(2332);n(4148),n(5757);const s={sidebar_position:99},a="coder",c={id:"directives/coder",title:"coder",description:"Introduced in v0.15.0. For backward compatibility, decoder (introduced in v0.10.0) now is an alias of coder.",source:"@site/docs/directives/coder.mdx",sourceDirName:"directives",slug:"/directives/coder",permalink:"/httpin/directives/coder",draft:!1,unlisted:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/directives/coder.mdx",tags:[],version:"current",sidebarPosition:99,frontMatter:{sidebar_position:99},sidebar:"docsSidebar",previous:{title:"default",permalink:"/httpin/directives/default"},next:{title:"Custom \ud83d\udd0c",permalink:"/httpin/directives/custom"}},o={},u=[{value:"Signature",id:"signature",level:2},{value:"Usage",id:"usage",level:3},{value:"Runable Example",id:"runable-example",level:3}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"coder",children:"coder"}),"\n",(0,i.jsxs)(t.p,{children:["Introduced in v0.15.0. For backward compatibility, ",(0,i.jsx)(t.code,{children:"decoder"})," (introduced in v0.10.0) now is an alias of ",(0,i.jsx)(t.code,{children:"coder"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"coder"})," is a ",(0,i.jsx)(t.strong,{children:"SPECIAL"})," ",(0,i.jsx)(t.a,{href:"/advanced/concepts#directive-executor",children:"directive executor"}),"\nwho overrides the coder that used to encode/decode the value of the corresponding field."]}),"\n",(0,i.jsx)(t.h2,{id:"signature",children:"Signature"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'Name: "coder" | "decoder"\nArgs: CODER_NAME\n'})}),"\n",(0,i.jsxs)(t.p,{children:["When there's a ",(0,i.jsx)(t.em,{children:"coder"})," directive defined for a field, the specified named decoder will be used rather than\nthe default one which is auto-selected by the type of the field."]}),"\n",(0,i.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",metastring:"{20,21,22,29}",children:'import httpin_core "github.com/ggicci/httpin/core"\n\ntype MyDate time.Time // adapted time.Time to MyDate, MyDate must implement httpin_core.Stringable\n\nfunc (t MyDate) ToString() (string, error) {\n\treturn time.Time(t).Format("2006-01-02"), nil\n}\n\nfunc (t *MyDate) FromString(value string) error {\n\tv, err := time.Parse("2006-01-02", value)\n\tif err != nil {\n\t\treturn &InvalidDate{Value: value, Err: err}\n\t}\n\t*t = MyDate(v)\n\treturn nil\n}\n\nfunc init() {\n\t// Before using the named coder, you need to register it.\n\thttpin_core.RegisterNamedCoder[time.Time]("date", func(t *time.Time) (httpin_core.Stringable, error) {\n\t\treturn (*MyDate)(t), nil\n\t})\n}\n\ntype ListUsersInput struct {\n\tGender string `in:"form=gender"`\n\t// By default, the decoder is auto-selected by the field type, which is of `time.Time`.\n\t// When coder directive is set, the specified named coder "date" will be used instead.\n\tBirthday time.Time `in:"form=birthday;coder=date"`\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"runable-example",children:"Runable Example"}),"\n",(0,i.jsx)(d.Z,{children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"net/http/httptest"\n\t"time"\n\n\t"github.com/ggicci/httpin"\n\thttpin_core "github.com/ggicci/httpin/core"\n\t"github.com/justinas/alice"\n)\n\ntype MyDate time.Time // adapted time.Time to MyDate, MyDate must implement httpin_core.Stringable\n\nfunc (t MyDate) ToString() (string, error) {\n\treturn time.Time(t).Format("2006-01-02"), nil\n}\n\nfunc (t *MyDate) FromString(value string) error {\n\tv, err := time.Parse("2006-01-02", value)\n\tif err != nil {\n\t\treturn fmt.Errorf("invalid date: %w", err)\n\t}\n\t*t = MyDate(v)\n\treturn nil\n}\n\nfunc init() {\n\thttpin_core.RegisterNamedCoder[time.Time]("date", func(t *time.Time) (httpin_core.Stringable, error) {\n\t\treturn (*MyDate)(t), nil\n\t})\n}\n\ntype ListUsersInput struct {\n\tGender string `in:"form=gender"`\n\t// By default, the decoder is auto-selected by the field type, which is of `time.Time`.\n\t// When decoder directive is set, the specified named decoder "date" will be used instead.\n\tBirthday time.Time `in:"form=birthday;coder=date"`\n}\n\nfunc ListUsers(rw http.ResponseWriter, r *http.Request) {\n\tinput := r.Context().Value(httpin.Input).(*ListUsersInput)\n\tfmt.Printf("input: %#v\\n", input)\n}\n\nfunc main() {\n\tmux := http.NewServeMux()\n\tmux.Handle("/users", alice.New(\n\t\thttpin.NewInput(ListUsersInput{}),\n\t).ThenFunc(ListUsers))\n\n\tr, _ := http.NewRequest("GET", "/users?gender=male&birthday=1991-11-10", nil)\n\trw := httptest.NewRecorder()\n\tmux.ServeHTTP(rw, r)\n}\n'})})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},5757:(e,t,n)=>{n.d(t,{Z:()=>i});const i={inputOutput:{inputTitle:"Request",outputTitle:"ListTasksQuery",rows:[{input:"\n  GET /tasks?page=4&perPage=10&state=failed&state=succeeded\n  ",output:'\n  {\n      Page:      4,\n      PerPage:   10,\n      StateList: []string{"failed", "succeeded"},\n  }'},{input:"\n  GET /tasks\n  ",output:'\n  {\n            Page:      1,\n            PerPage:   20,\n            StateList: []string{"pending", "running"},\n  }'}]}}},4148:(e,t,n)=>{n.d(t,{Z:()=>d});var i=n(6112),r=(n(7294),n(5893));const d=e=>(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:e.inputTitle||"Input"}),(0,r.jsx)("th",{children:e.outputTitle||"Output"})]})}),(0,r.jsx)("tbody",{children:e.rows.map(((e,t)=>(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)(i.Z,{children:e.input.trim()})}),(0,r.jsx)("td",{children:(0,r.jsx)(i.Z,{className:"language-go",children:e.output.trim()})})]},t)))})]})}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[705],{5170:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var i=e(7462),r=e(3366),a=(e(7294),e(3905)),o=["components"],s={sidebar_position:3},u="gin-gonic/gin \ud83e\udd64",c={unversionedId:"integrations/gin",id:"integrations/gin",isDocsHomePage:!1,title:"gin-gonic/gin \ud83e\udd64",description:"Create a gin middleware - BindInput",source:"@site/docs/integrations/gin.md",sourceDirName:"integrations",slug:"/integrations/gin",permalink:"/httpin/integrations/gin",editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/integrations/gin.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"gorilla/mux \ud83e\udd8d",permalink:"/httpin/integrations/gorilla"},next:{title:"Concepts",permalink:"/httpin/advanced/concepts"}},d=[{value:"Create a gin middleware - <code>BindInput</code>",id:"create-a-gin-middleware---bindinput",children:[],level:2}],g={toc:d};function p(n){var t=n.components,e=(0,r.Z)(n,o);return(0,a.kt)("wrapper",(0,i.Z)({},g,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"gin-gonicgin-"},"gin-gonic/gin \ud83e\udd64"),(0,a.kt)("h2",{id:"create-a-gin-middleware---bindinput"},"Create a gin middleware - ",(0,a.kt)("inlineCode",{parentName:"h2"},"BindInput")),(0,a.kt)("p",null,"About ",(0,a.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/gin-gonic/gin#section-readme"},"gin middleware"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"{2,39,46}","{2,39,46}":!0},'// BindInput instances an httpin engine for a input struct as a gin middleware.\nfunc BindInput(inputStruct interface{}) gin.HandlerFunc {\n    engine, err := httpin.New(inputStruct)\n    if err != nil {\n        panic(err)\n    }\n\n    return func(c *gin.Context) {\n        input, err := engine.Decode(c.Request)\n        if err != nil {\n            var invalidFieldError *httpin.InvalidFieldError\n            if errors.As(err, &invalidFieldError) {\n                c.AbortWithStatusJSON(http.StatusBadRequest, invalidFieldError)\n                return\n            }\n            c.AbortWithStatus(http.StatusInternalServerError)\n            return\n        }\n\n        ctx := context.WithValue(c.Request.Context(), httpin.Input, input)\n        c.Request = c.Request.WithContext(ctx)\n        c.Next()\n    }\n}\n\ntype Pagination struct {\n    Page    int `in:"query=page"`\n    PerPage int `in:"query=per_page,page_size"`\n}\n\ntype ListUsersInput struct {\n    Gender   string `in:"query=gender"`\n    AgeRange []int  `in:"query=age_range"`\n    IsMember bool   `in:"query=is_member"`\n    Pagination\n}\n\nfunc ListUsers(c *gin.Context) {\n    input := c.Request.Context().Value(httpin.Input).(*ListUsersInput)\n    c.JSON(http.StatusOK, input)\n}\n\nfunc main() {\n    r := gin.New()\n    // Bind the input struct with your API handler.\n    r.GET("/users", BindInput(ListUsersInput{}), ListUsers)\n    r.Run()\n}\n')))}p.isMDXComponent=!0}}]);
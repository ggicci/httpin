"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[705],{4033:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=e(5893),r=e(1151);const o={sidebar_position:3},s="gin-gonic/gin \ud83e\udd64",a={id:"integrations/gin",title:"gin-gonic/gin \ud83e\udd64",description:"Integrations",source:"@site/docs/integrations/gin.md",sourceDirName:"integrations",slug:"/integrations/gin",permalink:"/httpin/integrations/gin",draft:!1,unlisted:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/integrations/gin.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"gorilla/mux \ud83e\udd8d",permalink:"/httpin/integrations/gorilla"},next:{title:"go-restful",permalink:"/httpin/integrations/go-restful"}},u={},c=[{value:"Integrations",id:"integrations",level:2},{value:"Run Demo",id:"run-demo",level:2}];function d(n){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"gin-gonicgin-",children:"gin-gonic/gin \ud83e\udd64"}),"\n",(0,i.jsx)(t.h2,{id:"integrations",children:"Integrations"}),"\n",(0,i.jsxs)(t.p,{children:["You have to create a ",(0,i.jsx)(t.a,{href:"https://github.com/gin-gonic/gin#using-middleware",children:"gin middleware"})," on your own.\nIn the following demo code, ",(0,i.jsx)(t.code,{children:"BindInput"})," is a good example to start."]}),"\n",(0,i.jsx)(t.h2,{id:"run-demo",children:"Run Demo"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",metastring:"{15,46,54}",children:'package main\n\nimport (\n\t"context"\n\t"errors"\n\t"fmt"\n\t"net/http"\n\t"net/http/httptest"\n\n\t"github.com/ggicci/httpin"\n\t"github.com/gin-gonic/gin"\n)\n\n// BindInput instances an httpin engine for an input struct as a gin middleware.\nfunc BindInput(inputStruct interface{}) gin.HandlerFunc {\n\tengine, err := httpin.New(inputStruct)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn func(c *gin.Context) {\n\t\tinput, err := engine.Decode(c.Request)\n\t\tif err != nil {\n\t\t\tvar invalidFieldError *httpin.InvalidFieldError\n\t\t\tif errors.As(err, &invalidFieldError) {\n\t\t\t\tc.AbortWithStatusJSON(http.StatusBadRequest, invalidFieldError)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.AbortWithStatus(http.StatusInternalServerError)\n\t\t\treturn\n\t\t}\n\n\t\tctx := context.WithValue(c.Request.Context(), httpin.Input, input)\n\t\tc.Request = c.Request.WithContext(ctx)\n\t\tc.Next()\n\t}\n}\n\ntype ListUsersInput struct {\n\tGender   string `in:"query=gender"`\n\tAgeRange []int  `in:"query=age_range"`\n\tIsMember bool   `in:"query=is_member"`\n}\n\nfunc ListUsers(c *gin.Context) {\n\tinput := c.Request.Context().Value(httpin.Input).(*ListUsersInput)\n\tfmt.Printf("input: %#v\\n", input)\n}\n\nfunc main() {\n\trouter := gin.New()\n\n\t// Bind input struct with handler.\n\trouter.GET("/users", BindInput(ListUsersInput{}), ListUsers)\n\n\tr, _ := http.NewRequest("GET", "/users?gender=male&age_range=18&age_range=24&is_member=1", nil)\n\n\trw := httptest.NewRecorder()\n\trouter.ServeHTTP(rw, r)\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Since it will run timeout on the Go Playground. I removed the ",(0,i.jsx)(t.code,{children:"Run"})," button for the above demo code.\nYou can test the above snippet by using the following command on your local host:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"mkdir /tmp/test && cd $_\n\ntouch main.go\n# then COPY & PASTE the above code to main.go\n\n\ngo mod init test\ngo mod tidy\n\ngo run main.go\n"})}),"\n",(0,i.jsx)(t.p,{children:"The output on my machine looks like this:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:'[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.\n - using env:\texport GIN_MODE=release\n - using code:\tgin.SetMode(gin.ReleaseMode)\n\n[GIN-debug] GET    /users                    --\x3e main.ListUsers (2 handlers)\ninput: &main.ListUsersInput{Gender:"male", AgeRange:[]int{18, 24}, IsMember:true}\n'})})]})}function g(n={}){const{wrapper:t}={...(0,r.a)(),...n.components};return t?(0,i.jsx)(t,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[705],{5170:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>g});var i=e(7462),r=(e(7294),e(3905));const o={sidebar_position:3},a="gin-gonic/gin \ud83e\udd64",s={unversionedId:"integrations/gin",id:"integrations/gin",title:"gin-gonic/gin \ud83e\udd64",description:"Integrations",source:"@site/docs/integrations/gin.md",sourceDirName:"integrations",slug:"/integrations/gin",permalink:"/httpin/integrations/gin",draft:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/integrations/gin.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"gorilla/mux \ud83e\udd8d",permalink:"/httpin/integrations/gorilla"},next:{title:"go-restful",permalink:"/httpin/integrations/go-restful"}},u={},g=[{value:"Integrations",id:"integrations",level:2},{value:"Run Demo",id:"run-demo",level:2}],d={toc:g},c="wrapper";function p(n){let{components:t,...e}=n;return(0,r.kt)(c,(0,i.Z)({},d,e,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gin-gonicgin-"},"gin-gonic/gin \ud83e\udd64"),(0,r.kt)("h2",{id:"integrations"},"Integrations"),(0,r.kt)("p",null,"You have to create a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gin-gonic/gin#using-middleware"},"gin middleware")," on your own.\nIn the following demo code, ",(0,r.kt)("inlineCode",{parentName:"p"},"BindInput")," is a good example to start."),(0,r.kt)("h2",{id:"run-demo"},"Run Demo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:"{15,46,54}","{15,46,54}":!0},'package main\n\nimport (\n    "context"\n    "errors"\n    "fmt"\n    "net/http"\n    "net/http/httptest"\n\n    "github.com/ggicci/httpin"\n    "github.com/gin-gonic/gin"\n)\n\n// BindInput instances an httpin engine for an input struct as a gin middleware.\nfunc BindInput(inputStruct interface{}) gin.HandlerFunc {\n    engine, err := httpin.New(inputStruct)\n    if err != nil {\n        panic(err)\n    }\n\n    return func(c *gin.Context) {\n        input, err := engine.Decode(c.Request)\n        if err != nil {\n            var invalidFieldError *httpin.InvalidFieldError\n            if errors.As(err, &invalidFieldError) {\n                c.AbortWithStatusJSON(http.StatusBadRequest, invalidFieldError)\n                return\n            }\n            c.AbortWithStatus(http.StatusInternalServerError)\n            return\n        }\n\n        ctx := context.WithValue(c.Request.Context(), httpin.Input, input)\n        c.Request = c.Request.WithContext(ctx)\n        c.Next()\n    }\n}\n\ntype ListUsersInput struct {\n    Gender   string `in:"query=gender"`\n    AgeRange []int  `in:"query=age_range"`\n    IsMember bool   `in:"query=is_member"`\n}\n\nfunc ListUsers(c *gin.Context) {\n    input := c.Request.Context().Value(httpin.Input).(*ListUsersInput)\n    fmt.Printf("input: %#v\\n", input)\n}\n\nfunc main() {\n    router := gin.New()\n\n    // Bind input struct with handler.\n    router.GET("/users", BindInput(ListUsersInput{}), ListUsers)\n\n    r, _ := http.NewRequest("GET", "/users?gender=male&age_range=18&age_range=24&is_member=1", nil)\n\n    rw := httptest.NewRecorder()\n    router.ServeHTTP(rw, r)\n}\n')),(0,r.kt)("p",null,"Since it will run timeout on the Go Playground. I removed the ",(0,r.kt)("inlineCode",{parentName:"p"},"Run")," button for the above demo code.\nYou can test the above snippet by using the following command on your local host:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir /tmp/test && cd $_\n\ntouch main.go\n# then COPY & PASTE the above code to main.go\n\n\ngo mod init test\ngo mod tidy\n\ngo run main.go\n")),(0,r.kt)("p",null,"The output on my machine looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'[GIN-debug] [WARNING] Running in "debug" mode. Switch to "release" mode in production.\n - using env:   export GIN_MODE=release\n - using code:  gin.SetMode(gin.ReleaseMode)\n\n[GIN-debug] GET    /users                    --\x3e main.ListUsers (2 handlers)\ninput: &main.ListUsersInput{Gender:"male", AgeRange:[]int{18, 24}, IsMember:true}\n')))}p.isMDXComponent=!0}}]);
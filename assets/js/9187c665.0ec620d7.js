"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[870],{4148:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(4464),o=n(7294);const a=e=>o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,e.inputTitle||"Input"),o.createElement("th",null,e.outputTitle||"Output"))),o.createElement("tbody",null,e.rows.map(((e,t)=>o.createElement("tr",{key:t},o.createElement("td",null,o.createElement(r.Z,null,e.input.trim())),o.createElement("td",null,o.createElement(r.Z,{className:"language-go"},e.output.trim())))))))},177:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var r=n(7462),o=(n(7294),n(3905)),a=n(4148);const i={inputOutput:{inputTitle:"Request (Mixed, Body + URL query)",outputTitle:"Profile",rows:[{input:"\nGET /users?role=backend&hireable=true\n",output:'\n{\n  Role: "backend",\n  Hireable: true,\n}\n\n// works just like query directive\n'},{input:"\nPOST /users HTTP/1.1\nHost: foo.example\nContent-Type: application/x-www-form-urlencoded\n\nrole=frontend&hireable=false\n",output:'\n{\n  Role: "frontend",\n  Hireable: false,\n}\n'},{input:"\nPOST /users?hireable=true HTTP/1.1\nHost: foo.example\nContent-Type: application/x-www-form-urlencoded\n\nrole=frontend&hireable=false\n",output:'\n{\n  Role: "frontend",\n  Hireable: false,\n}\n\n// Hireable in the body overrides the URL query.\n'},{input:"\nPOST /users?hireable=true HTTP/1.1\nHost: foo.example\nContent-Type: application/x-www-form-urlencoded\n\nrole=frontend\n",output:'\n{\n  Role: "frontend",\n  Hireable: true,\n}\n\n// Hireable is from URL query.\n'}]}},l={sidebar_position:3},s="form",p={unversionedId:"directives/form",id:"directives/form",title:"form",description:"form is a directive executor who decodes a field from HTTP form data, i.e. http.Request.Form.",source:"@site/docs/directives/form.mdx",sourceDirName:"directives",slug:"/directives/form",permalink:"/httpin/directives/form",draft:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/directives/form.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"header",permalink:"/httpin/directives/header"},next:{title:"body",permalink:"/httpin/directives/body"}},u={},d=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2}],m={toc:d},c="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"form"},"form"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"form")," is a ",(0,o.kt)("a",{parentName:"p",href:"/advanced/concepts#directive-executor"},"directive executor")," who decodes a field from HTTP form data, i.e. ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/net/http#Request"},(0,o.kt)("inlineCode",{parentName:"a"},"http.Request.Form")),"."),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'Name: "form"\nArgs: KEY1 [,KEY2 [,KEY3, ...]]\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"form")," will examine values of the keys one by one (KEY1 -> KEY2 -> ...) from the form data, the ",(0,o.kt)("strong",{parentName:"p"},"first non-empty")," value will be used to set the corresponding field of the input struct."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"In most cases, the ",(0,o.kt)("inlineCode",{parentName:"p"},"form")," directive just works like ",(0,o.kt)("a",{parentName:"p",href:"/directives/query"},(0,o.kt)("inlineCode",{parentName:"a"},"query")),". Because it also visits data from the URL querystring.\nBut if the form data sent by the client was of ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST"},(0,o.kt)("inlineCode",{parentName:"a"},"application/x-www-form-urlencoded"))," content type, ",(0,o.kt)("inlineCode",{parentName:"p"},"form")," will visit the form data first,\nand then visit the URL querystring."),(0,o.kt)("p",{parentName:"admonition"},"For more details, please refer to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/ggicci/httpin/pull/6#issuecomment-939273364"},"GH-5 add a query directive to pull values from querystring params #6")," and the following quotes.")),(0,o.kt)("p",null,"From the Go documentation:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Form contains the parsed form data, including both the URL field's query parameters and the PATCH, POST, or PUT form data.\nThis field is only available after ParseForm is called.")),(0,o.kt)("p",null,"And for ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/net/http#Request.ParseForm"},(0,o.kt)("inlineCode",{parentName:"a"},"http.Request.ParseForm")),", it is:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"ParseForm")," populates ",(0,o.kt)("inlineCode",{parentName:"p"},"r.Form")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"r.PostForm"),".\nFor all requests, ",(0,o.kt)("inlineCode",{parentName:"p"},"ParseForm")," parses the raw query from the URL and updates ",(0,o.kt)("inlineCode",{parentName:"p"},"r.Form"),".\nFor POST, PUT, and PATCH requests, it also reads the request body, parses it as a form and puts the results into both ",(0,o.kt)("inlineCode",{parentName:"p"},"r.PostForm")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"r.Form"),".\nRequest body parameters take precedence over URL query string values in ",(0,o.kt)("inlineCode",{parentName:"p"},"r.Form"),".")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Profile struct {\n    Role     string `in:"form=role"`\n    Hireable bool   `in:"form=hireable"`\n}\n')),(0,o.kt)(a.Z,{inputTitle:i.inputOutput.inputTitle,outputTitle:i.inputOutput.outputTitle,rows:i.inputOutput.rows,mdxType:"InputOutputTable"}))}f.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[215],{5757:function(e,t){t.Z={inputOutput:{inputTitle:"Request",outputTitle:"ListTasksQuery",rows:[{input:"\n  GET /tasks?page=4&perPage=10&state=failed&state=succeeded\n  ",output:'\n  {\n      Page:      4,\n      PerPage:   10,\n      StateList: []string{"failed", "succeeded"},\n  }'},{input:"\n  GET /tasks\n  ",output:'\n  {\n            Page:      1,\n            PerPage:   20,\n            StateList: []string{"pending", "running"},\n  }'}]}}},3152:function(e,t,n){n.d(t,{Z:function(){return h}});var r=n(4035),i=n(1720),a=n.n(i),d=n(9812),c=n(5670),u=n(7294),s="toolbar_uIxz",o="button_yMrS",l="hidden_X41c",p="https://goplay.ggicci.me",m=function(e){var t=e.children,n=e.onClick;return u.createElement("button",{className:o,onClick:n},t)},h=function(e){var t=e.children,n=u.useRef(null),i=u.useRef(null),o=t&&t.props&&"pre"===t.props.mdxType&&t,h=o&&o.props&&o.props.children;if(!h||"code"!==h.props.mdxType)return u.createElement("div",null,"GoPlay: the wrapped data is not a codeblock.");if(!/\blanguage-go\b/.test(h&&h.props.className))return u.createElement("div",null,"GoPlay: only go code supported.");function f(){return(f=(0,r.Z)(a().mark((function e(){var t,n;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new d.h(p),e.next=3,t.share(h.props.children.trim());case 3:n=e.sent,window.open(n,"_blank");case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return u.createElement(u.Fragment,null,t,u.createElement("div",{ref:n,className:l},u.createElement(c.Z,{language:"text"},u.createElement("div",{ref:i}))),u.createElement("div",{className:s},u.createElement(m,{onClick:function(){if(i.current){var e=new d.h(p);n.current.classList.remove(l),e.renderCompile(i.current,h.props.children.trim())}}},"Run"),u.createElement(m,{onClick:function(){return f.apply(this,arguments)}},"Try it yourself \u21e2")))}},4148:function(e,t,n){var r=n(5670),i=n(7294);t.Z=function(e){return i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,e.inputTitle||"Input"),i.createElement("th",null,e.outputTitle||"Output"))),i.createElement("tbody",null,e.rows.map((function(e,t){return i.createElement("tr",{key:t},i.createElement("td",null,i.createElement(r.Z,null,e.input.trim())),i.createElement("td",null,i.createElement(r.Z,{className:"language-go"},e.output.trim())))}))))}},6267:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return u},metadata:function(){return o},toc:function(){return p}});var r=n(3117),i=n(102),a=(n(7294),n(3905)),d=n(3152),c=(n(4148),n(5757),["components"]),u={sidebar_position:8},s="decoder",o={unversionedId:"directives/decoder",id:"directives/decoder",title:"decoder",description:"Introduced in v0.10.0.",source:"@site/docs/directives/decoder.mdx",sourceDirName:"directives",slug:"/directives/decoder",permalink:"/httpin/directives/decoder",draft:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/directives/decoder.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"docsSidebar",previous:{title:"default",permalink:"/httpin/directives/default"},next:{title:"custom \ud83d\udd0c",permalink:"/httpin/directives/custom"}},l={},p=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Run Example",id:"run-example",level:2}],m={toc:p};function h(e){var t=e.components,n=(0,i.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"decoder"},"decoder"),(0,a.kt)("p",null,"Introduced in v0.10.0."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"decoder")," is a ",(0,a.kt)("strong",{parentName:"p"},"SPECIAL")," ",(0,a.kt)("a",{parentName:"p",href:"/advanced/concepts#directive-executor"},"directive executor"),"\nwho overrides the decoder used to decode the value of the corresponding field."),(0,a.kt)("h2",{id:"definition"},"Definition"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'Name: "decoder"\nArgs: DECODER_NAME\n')),(0,a.kt)("p",null,"When there's a ",(0,a.kt)("em",{parentName:"p"},"decoder")," directive defined for a field, the specified named decoder will be used rather than\nthe default one which is auto-selected by the type of the field."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"{7,14}","{7,14}":!0},'func decodeDate(value string) (interface{}, error) {\n    return time.Parse("2006-01-02", value)\n}\n\nfunc init() {\n    // Before using the decoder, you need to register it.\n    httpin.RegisterNamedDecoder("date", httpin.ValueTypeDecoderFunc(decodeDate))\n}\n\ntype ListUsersInput struct {\n    Gender string `in:"form=gender"`\n    // By default, the decoder is auto-selected by the field type, which is of `time.Time`.\n    // When decoder directive is set, the specified named decoder "date" will be used instead.\n    Birthday time.Time `in:"form=birthday;decoder=date"`\n}\n')),(0,a.kt)("h2",{id:"run-example"},"Run Example"),(0,a.kt)(d.Z,{mdxType:"GoPlay"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "net/http"\n    "net/http/httptest"\n    "time"\n\n    "github.com/ggicci/httpin"\n    "github.com/justinas/alice"\n)\n\nfunc init() {\n    httpin.RegisterNamedDecoder("date", httpin.ValueTypeDecoderFunc(decodeDate))\n}\n\nfunc decodeDate(value string) (interface{}, error) {\n    return time.Parse("2006-01-02", value)\n}\n\ntype ListUsersInput struct {\n    Gender string `in:"form=gender"`\n    // By default, the decoder is auto-selected by the field type, which is of `time.Time`.\n    // When decoder directive is set, the specified named decoder "date" will be used instead.\n    Birthday time.Time `in:"form=birthday;decoder=date"`\n}\n\nfunc ListUsers(rw http.ResponseWriter, r *http.Request) {\n    input := r.Context().Value(httpin.Input).(*ListUsersInput)\n    fmt.Printf("input: %#v\\n", input)\n}\n\nfunc main() {\n    mux := http.NewServeMux()\n    mux.Handle("/users", alice.New(\n        httpin.NewInput(ListUsersInput{}),\n    ).ThenFunc(ListUsers))\n\n    r, _ := http.NewRequest("GET", "/users?gender=male&birthday=1991-11-10", nil)\n    rw := httptest.NewRecorder()\n    mux.ServeHTTP(rw, r)\n}\n'))))}h.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[793],{3152:function(e,t,n){n.d(t,{Z:function(){return g}});var r=n(4035),i=n(1720),o=n.n(i),a=n(9812),s=n(5670),l=n(7294),u="toolbar_uIxz",c="button_yMrS",p="hidden_X41c",m="https://goplay.ggicci.me",d=function(e){var t=e.children,n=e.onClick;return l.createElement("button",{className:c,onClick:n},t)},g=function(e){var t=e.children,n=l.useRef(null),i=l.useRef(null),c=t&&t.props&&"pre"===t.props.mdxType&&t,g=c&&c.props&&c.props.children;if(!g||"code"!==g.props.mdxType)return l.createElement("div",null,"GoPlay: the wrapped data is not a codeblock.");if(!/\blanguage-go\b/.test(g&&g.props.className))return l.createElement("div",null,"GoPlay: only go code supported.");function h(){return(h=(0,r.Z)(o().mark((function e(){var t,n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new a.h(m),e.next=3,t.share(g.props.children.trim());case 3:n=e.sent,window.open(n,"_blank");case 5:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return l.createElement(l.Fragment,null,t,l.createElement("div",{ref:n,className:p},l.createElement(s.Z,{language:"text"},l.createElement("div",{ref:i}))),l.createElement("div",{className:u},l.createElement(d,{onClick:function(){if(i.current){var e=new a.h(m);n.current.classList.remove(p),e.renderCompile(i.current,g.props.children.trim())}}},"Run"),l.createElement(d,{onClick:function(){return h.apply(this,arguments)}},"Try it yourself \u21e2")))}},7129:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return m}});var r=n(3117),i=n(102),o=(n(7294),n(3905)),a=n(3152),s=["components"],l={sidebar_position:2},u="gorilla/mux \ud83e\udd8d",c={unversionedId:"integrations/gorilla",id:"integrations/gorilla",title:"gorilla/mux \ud83e\udd8d",description:"gorilla/mux is",source:"@site/docs/integrations/gorilla.mdx",sourceDirName:"integrations",slug:"/integrations/gorilla",permalink:"/httpin/integrations/gorilla",draft:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/integrations/gorilla.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"go-chi/chi",permalink:"/httpin/integrations/gochi"},next:{title:"gin-gonic/gin \ud83e\udd64",permalink:"/httpin/integrations/gin"}},p={},m=[{value:"Integrations",id:"integrations",level:2},{value:"Run Demo",id:"run-demo",level:2}],d={toc:m};function g(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"gorillamux-"},"gorilla/mux \ud83e\udd8d"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/gorilla/mux"},"gorilla/mux")," is"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A powerful HTTP router and URL matcher for building Go web servers")),(0,o.kt)("h2",{id:"integrations"},"Integrations"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Enable ",(0,o.kt)("inlineCode",{parentName:"li"},"path")," directive by using ",(0,o.kt)("inlineCode",{parentName:"li"},"mux.Vars")," method")),(0,o.kt)("h2",{id:"run-demo"},"Run Demo"),(0,o.kt)(a.Z,{mdxType:"GoPlay"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go",metastring:"{21,29,36}","{21,29,36}":!0},'package main\n\nimport (\n    "fmt"\n    "net/http"\n    "net/http/httptest"\n\n    "github.com/ggicci/httpin"\n    "github.com/gorilla/mux"\n    "github.com/justinas/alice"\n)\n\ntype ListUserReposInput struct {\n    Username   string `in:"path=username"`\n    Visibility string `in:"query=visibility"`\n    Fork       bool   `in:"query=fork"`\n}\n\nfunc ListUserRepos(rw http.ResponseWriter, r *http.Request) {\n    // Retrieve you data in one line of code!\n    input := r.Context().Value(httpin.Input).(*ListUserReposInput)\n\n    fmt.Printf("input: %#v\\n", input)\n}\n\nfunc init() {\n    // Register a directive named "path" to retrieve values from `mux.Vars`,\n    // i.e. decode path variables.\n    httpin.UseGorillaMux("path", mux.Vars)\n}\n\nfunc main() {\n    router := mux.NewRouter()\n\n    // Bind input struct with handler.\n    router.Handle("/users/{username}/repos", alice.New(\n        httpin.NewInput(ListUserReposInput{}),\n    ).ThenFunc(ListUserRepos)).Methods("GET")\n\n    r, _ := http.NewRequest("GET", "/users/ggicci/repos?visibility=public&fork=1", nil)\n\n    rw := httptest.NewRecorder()\n    router.ServeHTTP(rw, r)\n}\n'))))}g.isMDXComponent=!0}}]);
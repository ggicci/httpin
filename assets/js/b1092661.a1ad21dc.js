"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[793],{4247:(t,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var e=i(5893),r=i(1151),s=i(2332);const o={sidebar_position:2},a="gorilla/mux \ud83e\udd8d",l={id:"integrations/gorilla",title:"gorilla/mux \ud83e\udd8d",description:"gorilla/mux is",source:"@site/docs/integrations/gorilla.mdx",sourceDirName:"integrations",slug:"/integrations/gorilla",permalink:"/httpin/integrations/gorilla",draft:!1,unlisted:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/integrations/gorilla.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"go-chi/chi",permalink:"/httpin/integrations/gochi"},next:{title:"gin-gonic/gin \ud83e\udd64",permalink:"/httpin/integrations/gin"}},c={},u=[{value:"Integrations",id:"integrations",level:2},{value:"Run Demo",id:"run-demo",level:2}];function p(t){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.a)(),...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{id:"gorillamux-",children:"gorilla/mux \ud83e\udd8d"}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:"https://github.com/gorilla/mux",children:"gorilla/mux"})," is"]}),"\n",(0,e.jsxs)(n.blockquote,{children:["\n",(0,e.jsx)(n.p,{children:"A powerful HTTP router and URL matcher for building Go web servers"}),"\n"]}),"\n",(0,e.jsx)(n.h2,{id:"integrations",children:"Integrations"}),"\n",(0,e.jsxs)(n.ol,{children:["\n",(0,e.jsxs)(n.li,{children:["Enable ",(0,e.jsx)(n.code,{children:"path"})," directive by using ",(0,e.jsx)(n.code,{children:"mux.Vars"})," method"]}),"\n"]}),"\n",(0,e.jsx)(n.h2,{id:"run-demo",children:"Run Demo"}),"\n",(0,e.jsx)(s.Z,{children:(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-go",metastring:"{21,29,36}",children:'package main\n\nimport (\n\t"fmt"\n\t"net/http"\n\t"net/http/httptest"\n\n\t"github.com/ggicci/httpin"\n\thttpin_integration "github.com/ggicci/httpin/integration"\n\t"github.com/gorilla/mux"\n\t"github.com/justinas/alice"\n)\n\ntype ListUserReposInput struct {\n\tUsername   string `in:"path=username"`\n\tVisibility string `in:"query=visibility"`\n\tFork       bool   `in:"query=fork"`\n}\n\nfunc ListUserRepos(rw http.ResponseWriter, r *http.Request) {\n\t// Retrieve you data in one line of code!\n\tinput := r.Context().Value(httpin.Input).(*ListUserReposInput)\n\n\tfmt.Printf("input: %#v\\n", input)\n}\n\nfunc init() {\n\t// Register a directive named "path" to retrieve values from `mux.Vars`,\n\t// i.e. decode path variables.\n\thttpin_integration.UseGorillaMux("path", mux.Vars)\n}\n\nfunc main() {\n\trouter := mux.NewRouter()\n\n\t// Bind input struct with handler.\n\trouter.Handle("/users/{username}/repos", alice.New(\n\t\thttpin.NewInput(ListUserReposInput{}),\n\t).ThenFunc(ListUserRepos)).Methods("GET")\n\n\tr, _ := http.NewRequest("GET", "/users/ggicci/repos?visibility=public&fork=1", nil)\n\n\trw := httptest.NewRecorder()\n\trouter.ServeHTTP(rw, r)\n}\n'})})})]})}function d(t={}){const{wrapper:n}={...(0,r.a)(),...t.components};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(p,{...t})}):p(t)}}}]);
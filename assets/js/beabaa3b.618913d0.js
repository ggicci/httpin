"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[322],{320:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=n(5893),o=n(1151);const i={sidebar_position:2},d="Error Handler",a={id:"advanced/error-handler",title:"Error Handler",description:"Introduced in v0.6.0.",source:"@site/docs/advanced/error-handler.md",sourceDirName:"advanced",slug:"/advanced/error-handler",permalink:"/httpin/advanced/error-handler",draft:!1,unlisted:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/advanced/error-handler.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Concepts",permalink:"/httpin/advanced/concepts"},next:{title:"File Uploads",permalink:"/httpin/advanced/upload-files"}},s={},l=[{value:"The WithErrorHandler Option",id:"the-witherrorhandler-option",level:2},{value:"Global Error Handler",id:"global-error-handler",level:2}];function c(r){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"error-handler",children:"Error Handler"}),"\n",(0,t.jsx)(e.p,{children:"Introduced in v0.6.0."}),"\n",(0,t.jsxs)(e.p,{children:["While using ",(0,t.jsx)(e.code,{children:"httpin.NewInput"})," to create an HTTP middleware handler, an error handler will be used to handle cases of decoding failures. You can sepcify a custom error handler for ",(0,t.jsx)(e.strong,{children:"httpin"})," to use. Which should adhere to the following signature:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:"func CustomErrorHandler(rw http.ResponseWriter, r *http.Request, err error) {\n    // ...\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"the-witherrorhandler-option",children:"The WithErrorHandler Option"}),"\n",(0,t.jsx)(e.p,{children:"Using with an HTTP middleware handler:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",metastring:"{5}",children:'router := chi.NewRouter()\n\nfunc init() {\n    router.With(\n        httpin.NewInput(ListThingsInput{}, WithErrorHandler(CustomErrorHandler)),\n    ).Get("/things/:id", ListThings)\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Using with a core:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",metastring:"{1}",children:"co, err := httpin.New(Thing{}, WithErrorHandler(CustomErrorHandler))\ninput, err := co.Decode(req)\n"})}),"\n",(0,t.jsx)(e.h2,{id:"global-error-handler",children:"Global Error Handler"}),"\n",(0,t.jsxs)(e.p,{children:["If you are using ",(0,t.jsx)(e.code,{children:"httpin.NewInput"})," to create middlewares, you will find that it's annoying to add an option to each call in order to use a custom error handler."]}),"\n",(0,t.jsx)(e.p,{children:"Replace the default error handler globally:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",metastring:"{8}",children:'import httpin_core "github.com/ggicci/httpin/core"\n\nfunc myCustomErrorHandler(rw http.ResponseWriter, r *http.Request, err error) {\n    // ...\n}\n\nfunc init() {\n    httpin_core.RegisterErrorHandler(myCustomErrorHandler)\n}\n'})})]})}function h(r={}){const{wrapper:e}={...(0,o.a)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(c,{...r})}):c(r)}}}]);
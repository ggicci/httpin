"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[396],{2332:(e,t,n)=>{n.d(t,{Z:()=>c});var r=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{d(r.next(e))}catch(t){i(t)}}function s(e){try{d(r.throw(e))}catch(t){i(t)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((r=r.apply(e,t||[])).next())}))};class o{constructor(e="/goplay"){this.proxyUrl=e}raiseForStatus(e){return r(this,void 0,void 0,(function*(){if(!e.ok){const t=yield e.text();throw new Error(t?e.statusText+": "+t:e.statusText)}}))}compile(e,t){return r(this,void 0,void 0,(function*(){const n=new FormData;n.append("version","2"),n.append("withVet","true"),n.append("body",e);const r=yield fetch(`${this.proxyUrl}/_/compile?backend=${t||""}`,{method:"POST",body:n});return yield this.raiseForStatus(r),yield r.json()}))}renderCompile(e,t,n){return r(this,void 0,void 0,(function*(){e.replaceChildren(this.renderMessage("system","Waiting for remote server..."));const r=yield this.compile(t,n);if(e.replaceChildren(),""!=r.Errors)return e.appendChild(this.renderMessage("error",r.Errors)),void e.appendChild(this.renderMessage("system","\nGo build failed."));for(const t of r.Events||[])e.appendChild(yield this.renderEvent(t));e.appendChild(this.renderMessage("system","\nProgram exited."))}))}renderEvent(e){return r(this,void 0,void 0,(function*(){var t;return e.Delay>=0&&(yield(t=e.Delay/1e6,new Promise((e=>setTimeout(e,t))))),this.renderMessage(e.Kind,e.Message)}))}renderMessage(e,t){const n=document.createElement("span");return n.classList.add(e),n.innerText=t,n}share(e,t){return r(this,void 0,void 0,(function*(){const n=yield fetch(`${this.proxyUrl}/_/share`,{method:"POST",body:e});yield this.raiseForStatus(n);const r="https://go.dev/play/p/"+(yield n.text());return t?`${r}?v=${t}`:r}))}}var i=n(4464),a=n(7294);const s="toolbar_uIxz",d="button_yMrS",l="hidden_X41c",p="https://goplay.ggicci.me",u=e=>{const{children:t,onClick:n}=e;return a.createElement("button",{className:d,onClick:n},t)},c=e=>{const{children:t}=e,n=a.useRef(null),r=a.useRef(null),d=t&&t.props&&"pre"===t.props.mdxType&&t,c=d&&d.props&&d.props.children;if(!c||"code"!==c.props.mdxType)return a.createElement("div",null,"GoPlay: the wrapped data is not a codeblock.");if(!/\blanguage-go\b/.test(c&&c.props.className))return a.createElement("div",null,"GoPlay: only go code supported.");return a.createElement(a.Fragment,null,t,a.createElement("div",{ref:n,className:l},a.createElement(i.Z,{language:"text"},a.createElement("div",{ref:r}))),a.createElement("div",{className:s},a.createElement(u,{onClick:function(){if(r.current){const e=new o(p);n.current.classList.remove(l),e.renderCompile(r.current,c.props.children.trim())}}},"Run"),a.createElement(u,{onClick:async function(){const e=new o(p),t=await e.share(c.props.children.trim());window.open(t,"_blank")}},"Try it yourself \u21e2")))}},4148:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(4464),o=n(7294);const i=e=>o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,e.inputTitle||"Input"),o.createElement("th",null,e.outputTitle||"Output"))),o.createElement("tbody",null,e.rows.map(((e,t)=>o.createElement("tr",{key:t},o.createElement("td",null,o.createElement(r.Z,null,e.input.trim())),o.createElement("td",null,o.createElement(r.Z,{className:"language-go"},e.output.trim())))))))},1090:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>d,metadata:()=>p,toc:()=>c});var r=n(7462),o=(n(7294),n(3905)),i=n(2332),a=n(4148);const s={inputOutput:{inputTitle:"Request (Body)",outputTitle:"CreateUserInput",rows:[{input:'\nPOST /users HTTP/1.1\nHost: foo.example\nContent-Type: application/json\n\n{ "login": "alex", "gender": "female" }\n  ',output:'\nPayload: &User{\n    Login: "alex",\n    Gender: "female",\n}\n'}]}},d={sidebar_position:4},l="body",p={unversionedId:"directives/body",id:"directives/body",title:"body",description:"body is a directive executor who decodes a field from the body of the request, i.e. http.Request.Body, JSON and XML formats are supported.",source:"@site/docs/directives/body.mdx",sourceDirName:"directives",slug:"/directives/body",permalink:"/httpin/directives/body",draft:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/directives/body.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"form",permalink:"/httpin/directives/form"},next:{title:"path",permalink:"/httpin/directives/path"}},u={},c=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"<del>Body Annotations</del>",id:"body-annotations",level:2},{value:"Custom Body Decoders",id:"custom-body-decoders",level:2}],m={toc:c},h="wrapper";function g(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"body"},"body"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"body")," is a ",(0,o.kt)("a",{parentName:"p",href:"/advanced/concepts#directive-executor"},"directive executor")," who decodes a field from the body of the request, i.e. ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/net/http#Request"},(0,o.kt)("inlineCode",{parentName:"a"},"http.Request.Body")),", ",(0,o.kt)("strong",{parentName:"p"},"JSON")," and ",(0,o.kt)("strong",{parentName:"p"},"XML")," formats are supported."),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'Name: "body"\nArgs: BODY_TYPE\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"body")," will read the content of the request body and parses it as ",(0,o.kt)("inlineCode",{parentName:"p"},"BODY_TYPE")," into the corresponding field of the struct. Supported BODY_TYPE are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"json"),": parses the body as an JSON object"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"xml"),": parses the body as an XML object")),(0,o.kt)("p",null,"If BODY_TYPE were not specified, ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," will be used."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type User struct {\n    Login  string `json:"login"`\n    Gender string `json:"gender"`\n}\n\ntype CreateUserInput struct {\n    Payload *User `in:"body=json"` // use "body=xml" for XML formatted body\n}\n')),(0,o.kt)(a.Z,{inputTitle:s.inputOutput.inputTitle,outputTitle:s.inputOutput.outputTitle,rows:s.inputOutput.rows,mdxType:"InputOutputTable"}),(0,o.kt)(i.Z,{mdxType:"GoPlay"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "io"\n    "net/http"\n    "net/http/httptest"\n    "strings"\n\n    "github.com/ggicci/httpin"\n    "github.com/go-chi/chi/v5"\n)\n\ntype UpdateUserInput struct {\n    ID      string `in:"path=id"` // NOTE: register a path directive before using\n    Payload struct {\n        Display string `json:"display"`\n        Email   string `json:"email"`\n        IsAdmin bool   `json:"is_admin"`\n    } `in:"body=json"`\n}\n\nfunc UpdateUserHandler(rw http.ResponseWriter, r *http.Request) {\n    input := r.Context().Value(httpin.Input).(*UpdateUserInput)\n    fmt.Printf("input: %#v\\n", input)\n}\n\nfunc init() {\n    httpin.UseGochiURLParam("path", chi.URLParam)\n}\n\nfunc main() {\n    router := chi.NewRouter()\n    router.With(\n        httpin.NewInput(UpdateUserInput{}),\n    ).Put("/users/{id}", UpdateUserHandler)\n\n    r, _ := http.NewRequest("PUT", "/users/19911110", nil)\n    r.Body = io.NopCloser(strings.NewReader(`{\n            "display": "Ggicci Never Cry",\n            "email": "secret_@xxx.com",\n            "is_admin": true\n        }`))\n\n    rw := httptest.NewRecorder()\n    router.ServeHTTP(rw, r)\n}\n'))),(0,o.kt)("h2",{id:"body-annotations"},(0,o.kt)("del",null,"Body Annotations")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Deprecated since v0.12.0")),(0,o.kt)("p",null,"There're two ",(0,o.kt)("em",{parentName:"p"},"body decoder annotations")," that can be used to read the body of the request:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",null,"`httpin.JSONBody`: parses the body as an JSON object")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("del",null,"`httpin.XMLBody`: parses the body as an XML object"))),(0,o.kt)("p",null,"You can embed one of them into your struct like the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type CreateUserInput struct {\n    httpin.JSONBody\n    Login  string `json:"login"`\n    Gender string `json:"gender"`\n}\n')),(0,o.kt)("p",null,"or"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type User struct {\n    Login  string `json:"login"`\n    Gender string `json:"gender"`\n}\n\ntype CreateUserInput struct {\n    httpin.JSONBody\n    *User\n}\n')),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"Body Annotations")," turns the whole struct into a target to which the request body\nwill be decoded and populated. So it doesn't support a mix of body input and\nparam input. Instead, embedding a struct into the input struct can achieve this.\nCheck the demo code above.")),(0,o.kt)("h2",{id:"custom-body-decoders"},"Custom Body Decoders"),(0,o.kt)("p",null,"Use one of the following methods to add/replace a new body decoder to ",(0,o.kt)("strong",{parentName:"p"},"httpin"),"."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://pkg.go.dev/github.com/ggicci/httpin#RegisterBodyDecoder"},(0,o.kt)("inlineCode",{parentName:"a"},"RegisterBodyDecoder"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"https://pkg.go.dev/github.com/ggicci/httpin#ReplaceBodyDecoder"},(0,o.kt)("inlineCode",{parentName:"a"},"ReplaceBodyDecoder")))),(0,o.kt)("p",null,"For example, the default JSON decoder is borrowed from Go's standard ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/encoding/json"},(0,o.kt)("inlineCode",{parentName:"a"},"encoding/json"))," package.\nIf you want to use a different JSON decoder, you can replace it by using the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func init() {\n    httpin.ReplaceBodyDecoder("json", &myJSONDecoder{})\n}\n')),(0,o.kt)("p",null,"You also can register a new body decoder by using the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func init() {\n    httpin.RegisterBodyDecoder("yaml", &myYAMLDecoder{})\n    // OR\n    httpin.ReplaceBodyDecoder("yaml", &myYAMLDecoder{})\n}\n')))}g.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[396],{9624:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=n(5893),s=n(1151),r=n(2332),o=n(4148);const d={inputOutput:{inputTitle:"Request (Body)",outputTitle:"CreateUserInput",rows:[{input:'\nPOST /users HTTP/1.1\nHost: foo.example\nContent-Type: application/json\n\n{ "login": "alex", "gender": "female" }\n  ',output:'\nPayload: &User{\n    Login: "alex",\n    Gender: "female",\n}\n'}]}},a={sidebar_position:4},c="body",l={id:"directives/body",title:"body",description:"body is a directive executor who decodes/encodes a field from/to the body of the request, i.e. http.Request.Body, JSON and XML formats are supported.",source:"@site/docs/directives/body.mdx",sourceDirName:"directives",slug:"/directives/body",permalink:"/httpin/directives/body",draft:!1,unlisted:!1,editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/directives/body.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"form",permalink:"/httpin/directives/form"},next:{title:"path",permalink:"/httpin/directives/path"}},p={},u=[{value:"Signature",id:"signature",level:2},{value:"Decoding",id:"decoding",level:2},{value:"Usage",id:"usage",level:3},{value:"Runable Example",id:"runable-example",level:3},{value:"Encoding",id:"encoding",level:2},{value:"Runable Example",id:"runable-example-1",level:3},{value:"Custom Body Format",id:"custom-body-format",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"body",children:"body"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"body"})," is a ",(0,i.jsx)(t.a,{href:"/advanced/concepts#directive-executor",children:"directive executor"})," who decodes/encodes a field from/to the body of the request, i.e. ",(0,i.jsx)(t.a,{href:"https://pkg.go.dev/net/http#Request",children:(0,i.jsx)(t.code,{children:"http.Request.Body"})}),", ",(0,i.jsx)(t.strong,{children:"JSON"})," and ",(0,i.jsx)(t.strong,{children:"XML"})," formats are supported."]}),"\n",(0,i.jsx)(t.h2,{id:"signature",children:"Signature"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:'Name: "body"\nArgs: BODY_TYPE\n'})}),"\n",(0,i.jsx)(t.p,{children:"Supported BODY_TYPE are:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"json"}),": parses the body as an JSON object"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"xml"}),": parses the body as an XML object"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["If BODY_TYPE were not specified, ",(0,i.jsx)(t.code,{children:"json"})," will be used."]}),"\n",(0,i.jsx)(t.h2,{id:"decoding",children:"Decoding"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"body"})," will read the content of the request body and parses it as ",(0,i.jsx)(t.code,{children:"BODY_TYPE"})," into the corresponding field of the struct."]}),"\n",(0,i.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'type User struct {\n\tLogin  string `json:"login"`\n\tGender string `json:"gender"`\n}\n\ntype CreateUserInput struct {\n\tPayload *User `in:"body=json"` // use "body=xml" for XML formatted body\n}\n'})}),"\n",(0,i.jsx)(o.Z,{inputTitle:d.inputOutput.inputTitle,outputTitle:d.inputOutput.outputTitle,rows:d.inputOutput.rows}),"\n",(0,i.jsx)(t.h3,{id:"runable-example",children:"Runable Example"}),"\n",(0,i.jsx)(r.Z,{children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"io"\n\t"net/http"\n\t"net/http/httptest"\n\t"strings"\n\n\t"github.com/ggicci/httpin"\n\thttpin_integration "github.com/ggicci/httpin/integration"\n\t"github.com/go-chi/chi/v5"\n)\n\ntype UserPatch struct {\n\tDisplay string `json:"display"`\n\tEmail   string `json:"email"`\n\tIsAdmin bool   `json:"is_admin"`\n}\n\ntype UpdateUserInput struct {\n\tID      string    `in:"path=id"` // NOTE: register a path directive before using\n\tPayload UserPatch `in:"body=json"`\n}\n\nfunc UpdateUserHandler(rw http.ResponseWriter, r *http.Request) {\n\tinput := r.Context().Value(httpin.Input).(*UpdateUserInput)\n\tfmt.Printf("input: %#v\\n", input)\n}\n\nfunc init() {\n\thttpin_integration.UseGochiURLParam("path", chi.URLParam)\n}\n\nfunc main() {\n\trouter := chi.NewRouter()\n\trouter.With(\n\t\thttpin.NewInput(UpdateUserInput{}),\n\t).Put("/users/{id}", UpdateUserHandler)\n\n\tr, _ := http.NewRequest("PUT", "/users/19911110", nil)\n\tr.Body = io.NopCloser(strings.NewReader(`{\n\t\t\t"display": "Ggicci Never Cry",\n\t\t\t"email": "secret_@xxx.com",\n\t\t\t"is_admin": true\n\t\t}`))\n\n\trw := httptest.NewRecorder()\n\trouter.ServeHTTP(rw, r)\n}\n'})})}),"\n",(0,i.jsx)(t.p,{children:"Output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:'input: &main.UpdateUserInput{\n\tID:"19911110",\n\tPayload:main.UserPatch{\n\t\tDisplay:"Ggicci Never Cry",\n\t\tEmail:"secret_@xxx.com", IsAdmin:true\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"encoding",children:"Encoding"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"body"})," will encode the corresponding field of the struct into the body of the response, in ",(0,i.jsx)(t.code,{children:"BODY_TYPE"})," format."]}),"\n",(0,i.jsx)(t.h3,{id:"runable-example-1",children:"Runable Example"}),"\n",(0,i.jsx)(r.Z,{children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'package main\n\nimport (\n\t"fmt"\n\t"net/http/httputil"\n\n\t"github.com/ggicci/httpin"\n)\n\ntype UserPatch struct {\n\tDisplay string `json:"display"`\n\tEmail   string `json:"email"`\n\tIsAdmin bool   `json:"is_admin"`\n}\n\ntype UpdateUserInput struct {\n\tID      string    `in:"path=id"`\n\tPayload UserPatch `in:"body=json"`\n}\n\nfunc main() {\n\tinput := &UpdateUserInput{\n\t\tID: "ggicci",\n\t\tPayload: UserPatch{\n\t\t\tDisplay: "Ggicci",\n\t\t\tEmail:   "secret_@xxx.com",\n\t\t\tIsAdmin: true,\n\t\t},\n\t}\n\tr, _ := httpin.NewRequest("PATCH", "/users/{id}", input)\n\tdata, _ := httputil.DumpRequest(r, true)\n\tfmt.Printf("%s\\n", data)\n}\n'})})}),"\n",(0,i.jsx)(t.p,{children:"Output:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-text",children:'PATCH /users/ggicci HTTP/1.1\nContent-Type: application/json\n\n{"display":"Ggicci","email":"secret_@xxx.com","is_admin":true}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"custom-body-format",children:"Custom Body Format"}),"\n",(0,i.jsxs)(t.p,{children:["Call ",(0,i.jsx)(t.a,{href:"https://pkg.go.dev/github.com/ggicci/httpin#RegisterBodyFormat",children:(0,i.jsx)(t.code,{children:"RegisterBodyFormat"})})," to register a new body format/serializer to ",(0,i.jsx)(t.strong,{children:"httpin"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["For example, the default JSON decoder is borrowed from Go's standard ",(0,i.jsx)(t.a,{href:"https://pkg.go.dev/encoding/json",children:(0,i.jsx)(t.code,{children:"encoding/json"})})," package.\nIf you want to use a different JSON decoder, you can replace it by using the following code:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'import httpin_core "github.com/ggicci/httpin/core"\n\nfunc init() {\n\thttpin_core.RegisterBodyFormat("json", &MyPerformanentJSONSerializer{})\n}\n'})})]})}function g(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},4148:(e,t,n)=>{n.d(t,{Z:()=>r});var i=n(6112),s=(n(7294),n(5893));const r=e=>(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:e.inputTitle||"Input"}),(0,s.jsx)("th",{children:e.outputTitle||"Output"})]})}),(0,s.jsx)("tbody",{children:e.rows.map(((e,t)=>(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)(i.Z,{children:e.input.trim()})}),(0,s.jsx)("td",{children:(0,s.jsx)(i.Z,{className:"language-go",children:e.output.trim()})})]},t)))})]})}}]);
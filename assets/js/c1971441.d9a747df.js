"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6],{7430:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return c},contentTitle:function(){return h},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],c={sidebar_position:1},h="go-chi/chi",s={unversionedId:"integrations/gochi",id:"integrations/gochi",isDocsHomePage:!1,title:"go-chi/chi",description:"go-chi/chi is",source:"@site/docs/integrations/gochi.md",sourceDirName:"integrations",slug:"/integrations/gochi",permalink:"/httpin/integrations/gochi",editUrl:"https://github.com/ggicci/httpin/edit/documentation/docs/docs/integrations/gochi.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"net/http",permalink:"/httpin/integrations/http"},next:{title:"gorilla/mux \ud83e\udd8d",permalink:"/httpin/integrations/gorilla"}},p=[{value:"Chain <code>httpin.NewInput</code> middleware with <code>chi.With</code> method",id:"chain-httpinnewinput-middleware-with-chiwith-method",children:[],level:2},{value:"path Directive by <code>URLParam</code> Method",id:"path-directive-by-urlparam-method",children:[],level:2}],u={toc:p};function d(t){var e=t.components,n=(0,r.Z)(t,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"go-chichi"},"go-chi/chi"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/go-chi/chi"},(0,a.kt)("strong",{parentName:"a"},"go-chi/chi"))," is"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"a lightweight, idiomatic and composable router for building Go HTTP services.")),(0,a.kt)("h2",{id:"chain-httpinnewinput-middleware-with-chiwith-method"},"Chain ",(0,a.kt)("inlineCode",{parentName:"h2"},"httpin.NewInput")," middleware with ",(0,a.kt)("inlineCode",{parentName:"h2"},"chi.With")," method"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"{21}","{21}":!0},'type Pagination struct {\n    Page    int `in:"query=page"`\n    PerPage int `in:"query=per_page,page_size"`\n}\n\ntype ListUsersInput struct {\n    Gender   string `in:"query=gender"`\n    AgeRange []int  `in:"query=age_range"`\n    IsMember bool   `in:"query=is_member"`\n    Pagination\n}\n\nfunc ListUsers(rw http.ResponseWriter, r *http.Request) {\n    input := r.Context().Value(httpin.Input).(*ListUsersInput)\n    json.NewEncoder(rw).Encode(input)\n}\n\nfunc main() {\n    router := chi.NewRouter()\n    // use `With` method to chain the middleware created by `httpin.NewInput`\n    router.With(httpin.NewInput(ListUsersInput{})).Get("/users", ListUsers)\n}\n')),(0,a.kt)("h2",{id:"path-directive-by-urlparam-method"},"path Directive by ",(0,a.kt)("inlineCode",{parentName:"h2"},"URLParam")," Method"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go",metastring:"{4}","{4}":!0},'func init() {\n    // Register a directive named "path" to retrieve values from `chi.URLParam`,\n    // i.e. decode path variables.\n    httpin.UseGochiURLParam("path", chi.URLParam)\n}\n\ntype GetArticleOfUserInput struct {\n    Author    string `in:"path=author"` // equivalent to chi.URLParam("author")\n    ArticleID int64  `in:"path=article_id"`\n}\n\nfunc GetArticleOfUser(rw http.ResponseWriter, r *http.Request) {\n    var input = r.Context().Value(Input).(*GetArticleOfUserInput)\n    // ...\n}\n\nfunc main() {\n    r := chi.NewRouter()\n    r.With(\n        httpin.NewInput(GetArticleOfUserInput{}),\n    ).Get("/{author}/p/{article_id}", GetArticleOfUser)\n    // ...\n}\n')))}d.isMDXComponent=!0}}]);